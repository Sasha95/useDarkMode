{"version":3,"sources":["useDarkMode.js","useLocalStorage.js","Toggle.js","data.js","useMedia.js","App.js","serviceWorker.js","index.js"],"names":["useDarkMode","key","initialValue","useState","item","window","localStorage","getItem","JSON","parse","error","console","log","storedValue","setStoredValue","value","setItem","stringify","useLocalStorage","enabledState","setEnabledState","useEffect","element","document","body","classList","add","remove","Toggle","setDarkMode","type","onClick","image","width","height","useMedia","queries","values","defaultValue","setValue","mediaQueryLists","map","q","matchMedia","getValue","index","findIndex","mql","matches","handler","forEach","addListener","removeListener","App","darkMode","columnCount","columnHeights","Array","fill","columns","data","shortColumnIndex","indexOf","Math","min","push","className","column","i","a","style","paddingTop","src","alt","Boolean","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.0038af2f.chunk.js","sourcesContent":["import { useEffect } from 'react';\r\nimport {useLocalStorage} from './useLocalStorage';\r\n\r\nexport const useDarkMode=()=> { \r\n  // Use our useLocalStorage hook to persist state through a page refresh.\r\n  // Read the recipe for this hook to learn more: usehooks.com/useLocalStorage\r\n  const [enabledState, setEnabledState] = useLocalStorage('dark-mode-enabled');\r\n\r\n  // Fire off effect that add/removes dark mode class\r\n  useEffect(\r\n    () => {\r\n      const className = 'dark-mode';\r\n      const element = window.document.body;\r\n      if (enabledState) {\r\n        element.classList.add(className);\r\n      } else {\r\n        element.classList.remove(className);\r\n      }\r\n    },\r\n    [enabledState] // Only re-call effect when value changes\r\n  );\r\n\r\n  // Return enabled state and setter\r\n  return [enabledState, setEnabledState];\r\n}\r\n","import { useState } from 'react';\r\n\r\nexport const useLocalStorage=(key, initialValue)=> {\r\n  // State to store our value\r\n  // Pass initial state function to useState so logic is only executed once\r\n  const [storedValue, setStoredValue] = useState(() => {\r\n    try {\r\n      // Get from local storage by key\r\n      const item = window.localStorage.getItem(key);\r\n      // Parse stored json or if none return initialValue\r\n      return item ? JSON.parse(item) : initialValue;\r\n    } catch (error) {\r\n      // If error also return initialValue\r\n      console.log(error);\r\n      return initialValue;\r\n    }\r\n  });\r\n\r\n  const setValue = value => {\r\n    try {\r\n      // Save state\r\n      setStoredValue(value);\r\n      // Save to local storage\r\n      window.localStorage.setItem(key, JSON.stringify(value));\r\n    } catch (error) {\r\n      // A more advanced implementation would handle the error case\r\n      console.log(error);\r\n    }\r\n  };\r\n\r\n  return [storedValue, setValue];\r\n}\r\n","import React from 'react';\r\n\r\nconst Toggle = ({ setDarkMode }) => (\r\n  <div>\r\n    <button type=\"button\" onClick={() => setDarkMode(false)}>\r\n      ☀\r\n    </button>\r\n    <button type=\"button\" onClick={() => setDarkMode(true)}>\r\n      ☾\r\n    </button>\r\n  </div>\r\n);\r\n\r\nexport default Toggle;\r\n","export default [\r\n    {\r\n      image: 'https://source.unsplash.com/lxuB4abGzXc/800x1000',\r\n      width: 800,\r\n      height: 1000\r\n    },\r\n  \r\n    {\r\n      image: 'https://source.unsplash.com/d30sszrW7Vw/800x800',\r\n      width: 800,\r\n      height: 800\r\n    },\r\n  \r\n    {\r\n      image: 'https://source.unsplash.com/mDuluxr50Ew/800x500',\r\n      width: 800,\r\n      height: 500\r\n    },\r\n    {\r\n      image: 'https://source.unsplash.com/KX2mdxPYOtA/800x1100',\r\n      width: 800,\r\n      height: 1100\r\n    },\r\n  \r\n    {\r\n      image: 'https://source.unsplash.com/oNoctqY9Oso/800x1200',\r\n      width: 800,\r\n      height: 1200\r\n    },\r\n  \r\n    {\r\n      image: 'https://source.unsplash.com/-SFhuMwFClk/800x900',\r\n      width: 800,\r\n      height: 900\r\n    },\r\n    {\r\n      image: 'https://source.unsplash.com/hDqLoCCGOdU/800x1000',\r\n      width: 800,\r\n      height: 1000\r\n    },\r\n  \r\n    {\r\n      image: 'https://source.unsplash.com/UZ3V6AV5y4o/800x500',\r\n      width: 800,\r\n      height: 500\r\n    },\r\n    {\r\n      image: 'https://source.unsplash.com/vlLH_kn-_h8/800x1200',\r\n      width: 800,\r\n      height: 1200\r\n    },\r\n    {\r\n      image: 'https://source.unsplash.com/TGvIuQG0AXw/800x1100',\r\n      width: 800,\r\n      height: 1100\r\n    },\r\n    {\r\n      image: 'https://source.unsplash.com/pBLJBHbtv0c/800x1000',\r\n      width: 800,\r\n      height: 1000\r\n    }\r\n  ];\r\n  ","import { useEffect, useState } from 'react';\r\n\r\n// Alternate hook that accepts a single query\r\nexport const useMedia=(queries, values, defaultValue)=> {\r\n  // State and setter for matched value\r\n  const [value, setValue] = useState(defaultValue);\r\n\r\n  // Array containing a media query list for each query\r\n  const mediaQueryLists = queries.map(q => window.matchMedia(q));\r\n\r\n  // State update function\r\n  const getValue = () => {\r\n    // Get index of first media query that matches\r\n    const index = mediaQueryLists.findIndex(mql => mql.matches);\r\n    // Return related value or defaultValue if none\r\n    return typeof values[index] !== 'undefined' ? values[index] : defaultValue;\r\n  };\r\n\r\n  useEffect(\r\n    () => {\r\n      // Set the initial value\r\n      setValue(getValue);\r\n\r\n      // Event listener callback\r\n      // By defining getValue outside of useEffect we ensure that it has ...\r\n      // ... current values of hook args (as this hook only run on mount/dismount).\r\n      const handler = () => setValue(getValue);\r\n\r\n      // Set a listener for each media query with above handler as callback.\r\n      mediaQueryLists.forEach(mql => mql.addListener(handler));\r\n\r\n      // Remove listeners on cleanup\r\n      return () => mediaQueryLists.forEach(mql => mql.removeListener(handler));\r\n    },\r\n    // eslint-disable-next-line\r\n    [] // Empty array ensures effect is only run on mount and unmount\r\n  );\r\n  return value;\r\n}\r\n","import React from 'react';\nimport {useDarkMode} from './useDarkMode';\nimport Toggle from './Toggle';\nimport './App.scss'\nimport data from './data';\nimport {useMedia} from './useMedia';\nimport 'bulma/css/bulma.css';\n\nfunction App() {\n  const [darkMode, setDarkMode] = useDarkMode();\n\n  const columnCount = useMedia(\n    // Media queries\n    ['(min-width: 1500px)', '(min-width: 1000px)', '(min-width: 600px)'],\n    // Column counts (relates to above media queries by array index)\n    [5, 4, 3],\n    // Default column count\n    2\n  );\n\n  // Create array of column heights (start at 0)\n  let columnHeights = new Array(columnCount).fill(0);\n  // Create array of arrays that will hold each column's items\n  let columns = new Array(columnCount).fill().map(() => []);\n\n  data.forEach(item => {\n    // Get index of shortest column\n    const shortColumnIndex = columnHeights.indexOf(Math.min(...columnHeights));\n    // Add item\n    columns[shortColumnIndex].push(item);\n    // Update height\n    columnHeights[shortColumnIndex] += item.height;\n  });\n\n  return (\n      <div className=\"App\">\n      <Toggle darkMode={darkMode} setDarkMode={setDarkMode} />\n      <div className=\"columns is-mobile\">\n        {columns.map((column, i) => (\n          <div className=\"column\" key={i}>\n            {column.map((item, a) => (\n              <div\n                className=\"image-container\"\n                style={{\n                  // Size image container to aspect ratio of image\n                  paddingTop: (item.height / item.width) * 100 + '%'\n                }}\n                key={a}\n              >\n                <img src={item.image} alt=\"\" />\n              </div>\n            ))}\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}